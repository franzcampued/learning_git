Git Commands

Working with Local Repositories
-----------
git init 
This command turns a directory into an empty Git repository. This is the first step in creating a repository. 
Make sure you change to the directory you want to turn in to repository.
-----------
git add <file or directory name> or git add . (this adds all files not staged)
Adds files in the to the staging area for Git. Before a file is available to commit to a repository, the file needs to be added to the Git index (staging area). 
There are a few different ways to use git add, by adding entire directories, specific files, or all unstaged files.
-----------
git commit -m "commit message"
Record the changes made to the files to a local repository. For easy reference, each commit has a unique ID.
It’s best practice to include a message with each commit explaining the changes made in a commit. 
Adding a commit message helps to find a particular change or understanding the changes.
-----------
git status
This command returns the current state of the repository.
git status will return the current working branch. If a file is in the staging area, but not committed, it shows with git status. 
Or, if there are no changes it’ll return nothing to commit, working directory clean.
-----------
git config
With Git, there are many configurations and settings possible. git config is how to assign these settings.
With git config, a --global flag is used to write the settings to all repositories on a computer. 
Without a --global flag settings will only apply to the current repository that you are currently in.

>>Running git config globally
git config --global user.email "campuedfranzrenzo@gmail.com"
git config --global user.name "franzcampued"

>>Running git config on the current repository settings
git config user.email "campuedfranzrenzo@gmail.com"
git config user.name "franzcampued"
-----------
git branch
To determine what branch the local repository is on, add a new branch, or delete a branch.

>>Create a new branch
git branch <branch_name>

>>List all remote or local branches
git branch -a

>>Delete a branch
git branch -d <branch_name>
-----------
git checkout <branch_name> or main (change to main branch)
To start working in a different branch, use git checkout to switch branches.

>>Switching to branch 'new_feature'
git checkout new_feature

>>Creating and switching to branch 'new_branch'
$ git checkout -b new_branch
-----------
git merge <branch_name>
Integrate branches together. git merge combines the changes from one branch to another branch. 
For example, merge the changes made in a staging branch into the stable branch.
-----------

Working with Remote Repositories
-----------
git remote
To connect a local repository with a remote repository. A remote repository can have a name set to avoid having to remember the URL of the repository.

>>Add remote repository
git remote <command> <remote_name> <remote_URL>

>>List named remote repositories
git remote -v
-----------
git clone  <remote_URL>
To create a local working copy of an existing remote repository, use git clone to copy and download the repository to a computer. 
Cloning is the equivalent of git init when working with a remote repository. Git will create a directory locally with all files and repository history.
-----------
git pull
To get the latest version of a repository run git pull. This pulls the changes from the remote repository to the local computer.

git pull <branch_name> <remote_URL/remote_name>
-----------
git push
Sends local commits to the remote repository. git push requires two parameters: the remote repository and the branch that the push is for.

>>Push a branches to remote repository
git push <remote_URL/remote_name> <branch>

>>Push all local branches to remote repository
git push —all
-----------

Advanced Git Commands
-----------
git stash
To save changes made when they’re not in a state to commit them to a repository. 
This will store the work and give a clean working directory. For instance, when working on a new feature that’s not complete, but an urgent bug needs attention.

>>Store current work with untracked files
git stash -u

>>Bring stashed work back to the working directory
git stash pop
-----------
git log
To show the chronological commit history for a repository. This helps give context and history for a repository. 
git log is available immediately on a recently cloned repository to see history.

>>Show entire git log
git log

>>Show git log with date pameters
git log --<after/before/since/until>=<date>

>>Show git log based on commit author
git log --<author>="Author Name"
------------
git rm
Remove files or directories from the working index (staging area). 
With git rm, there are two options to keep in mind: force and cached. 
Running the command with force deletes the file. The cached command removes the file from the working index. 
When removing an entire directory, a recursive command is necessary.

>To remove a file from the working index (cached):
git rm --cached <file name>

>>To delete a file (force):
git rm -f <file name>

>>To remove an entire directory from the working index (cached):
git rm -r --cached <directory name>

>>To delete an entire directory (force):
git rm -r -f <file name>

------------

Git Worflow for Projects
1. Create new repository in GitHub

2. Clone the repository locally
--> git clone [https link]
Downloads the remote repository and creates a folder on your local machine with all its contents and Git tracking.

3. Set & Verify Remote URL
--> git remote -v

(Optional) Add another remote (like a backup repo)
git remote add backup [https link]

4. Create a New Branch for a Feature
--> git checkout -b [e.g feature/data-cleaning]
Always work on a separate branch — keeps your main branch clean.

5. Make Changes & Stage Them
--> git add .
--> git add [file] [file]

6. Commit Changes
--> git commit -m "commit message e.g Add data cleaning script for missing values"

7. Push your branch to GitHub
--> git push origin [branch e.g feature/data-cleaning]

In any case the branch does not exist in the remote repo
--> git push --set-upstream origin [branch e.g feature/data-cleaning]

Now your branch is available remotely too.

8. Create a Pull Request (PR)
A pull request is a proposal to merge a set of changes from one branch into another. 
In a pull request, collaborators can review and discuss the proposed set of changes before they integrate the changes into the main codebase.

-Go to your GitHub repo
-Switch to your branch feature/data-cleaning
-Click Compare & Pull Request
-Add description, explain what you’ve done
-Submit PR

PR allows code review and discussion before merging.
Check for merge conflicts - LGMT?

9. Merge a branch
-After approval, you can merge the branch to main on GitHub:
-Go to Pull Requests
-Open your PR
-Click Merge Pull Request
-Confirm Merge

Now your changes are part of main.

10. Sync Your Local main
This ensures your local main is up-to-date.
--> git checkout main
--> git pull origin main

11. Delete Merged branch (optional) but good if you will not need it and prevent confusion
locally
--> git branch -d [brand_name e.g feature/data-cleaning]

remote
--> git push origin --delete [brand_name e.g feature/data-cleaning]

Keep your repo clean by removing finished branches.


----------

Best Practices
-Use branches per feature/bugfix
-Pull the latest main before starting a new branch
-Write clear commit messages
-Keep main always deployable/working
-Review PRs carefully before merging
-Clean up old branches