Git Commands

Working with Local Repositories
-----------
git init 
This command turns a directory into an empty Git repository. This is the first step in creating a repository. 
Make sure you change to the directory you want to turn in to repository.
-----------
git add <file or directory name> or git add . (this adds all files not staged)
Adds files in the to the staging area for Git. Before a file is available to commit to a repository, the file needs to be added to the Git index (staging area). 
There are a few different ways to use git add, by adding entire directories, specific files, or all unstaged files.
-----------
git commit -m "commit message"
Record the changes made to the files to a local repository. For easy reference, each commit has a unique ID.
It’s best practice to include a message with each commit explaining the changes made in a commit. 
Adding a commit message helps to find a particular change or understanding the changes.
-----------
git status
This command returns the current state of the repository.
git status will return the current working branch. If a file is in the staging area, but not committed, it shows with git status. 
Or, if there are no changes it’ll return nothing to commit, working directory clean.
-----------
git config
With Git, there are many configurations and settings possible. git config is how to assign these settings.
With git config, a --global flag is used to write the settings to all repositories on a computer. 
Without a --global flag settings will only apply to the current repository that you are currently in.

>>Running git config globally
git config --global user.email "campuedfranzrenzo@gmail.com"
git config --global user.name "franzcampued"

>>Running git config on the current repository settings
git config user.email "campuedfranzrenzo@gmail.com"
git config user.name "franzcampued"
-----------
git branch
To determine what branch the local repository is on, add a new branch, or delete a branch.

>>Create a new branch
git branch <branch_name>

>>List all remote or local branches
git branch -a

>>Delete a branch
git branch -d <branch_name>
-----------
git checkout <branch_name> or main (change to main branch)
To start working in a different branch, use git checkout to switch branches.

>>Switching to branch 'new_feature'
git checkout new_feature

>>Creating and switching to branch 'new_branch'
$ git checkout -b new_branch
-----------
git merge <branch_name>
Integrate branches together. git merge combines the changes from one branch to another branch. 
For example, merge the changes made in a staging branch into the stable branch.
-----------

Working with Remote Repositories
-----------
git remote
To connect a local repository with a remote repository. A remote repository can have a name set to avoid having to remember the URL of the repository.

>>Add remote repository
git remote <command> <remote_name> <remote_URL>

>>List named remote repositories
git remote -v
-----------
git clone  <remote_URL>
To create a local working copy of an existing remote repository, use git clone to copy and download the repository to a computer. 
Cloning is the equivalent of git init when working with a remote repository. Git will create a directory locally with all files and repository history.
-----------
git pull
To get the latest version of a repository run git pull. This pulls the changes from the remote repository to the local computer.

git pull <branch_name> <remote_URL/remote_name>
-----------
git push
Sends local commits to the remote repository. git push requires two parameters: the remote repository and the branch that the push is for.

>>Push a branches to remote repository
git push <remote_URL/remote_name> <branch>

remote_URL/remote_name - remote repo usually = origin
*** you can check git remote -v to check remote repo name and link
branch - branch to push

>>Push all local branches to remote repository
git push —all

Summary:
git push	Push to the default remote/branch your local branch is tracking
git push origin <branch>	Push to the specified remote (origin) and branch explicitly
git push -u origin <branch>	Push and set the upstream tracking (so future git push knows where to go)

Using -u on First Push:
git push -u origin feature/data-cleaning
This: Pushes the branch

Sets origin/feature/data-cleaning as the tracking branch
So in the future, you can just do git push from that branch
-----------

Advanced Git Commands
-----------
git stash
To save changes made when they’re not in a state to commit them to a repository. 
This will store the work and give a clean working directory. For instance, when working on a new feature that’s not complete, but an urgent bug needs attention.

>>Store current work with untracked files
git stash -u

>>Bring stashed work back to the working directory
git stash pop
-----------
git log
To show the chronological commit history for a repository. This helps give context and history for a repository. 
git log is available immediately on a recently cloned repository to see history.

>>Show entire git log
git log

>>Show git log with date pameters
git log --<after/before/since/until>=<date>

>>Show git log based on commit author
git log --<author>="Author Name"
------------
git rm
Remove files or directories from the working index (staging area). 
With git rm, there are two options to keep in mind: force and cached. 
Running the command with force deletes the file. The cached command removes the file from the working index. 
When removing an entire directory, a recursive command is necessary.

>To remove a file from the working index (cached):
git rm --cached <file name>

>>To delete a file (force):
git rm -f <file name>

>>To remove an entire directory from the working index (cached):
git rm -r --cached <directory name>

>>To delete an entire directory (force):
git rm -r -f <file name>

------------

Git Worflow for Projects
1. Create new repository in GitHub

2. Clone the repository locally
--> git clone [https link]
Downloads the remote repository and creates a folder on your local machine with all its contents and Git tracking.

3. Set & Verify Remote URL
--> git remote -v

(Optional) Add another remote (like a backup repo)
git remote add backup [https link]

4. Create a New Branch for a Feature
--> git checkout -b [e.g feature/data-cleaning]
Always work on a separate branch — keeps your main branch clean.

5. Make Changes & Stage Them
--> git add .
--> git add [file] [file]

6. Commit Changes
--> git commit -m "commit message e.g Add data cleaning script for missing values"

7. Push your branch to GitHub
--> git push origin [branch e.g feature/data-cleaning]

Now your branch is available remotely too.

8. Create a Pull Request (PR)
A pull request is a proposal to merge a set of changes from one branch into another. 
In a pull request, collaborators can review and discuss the proposed set of changes before they integrate the changes into the main codebase.

-Go to your GitHub repo
-Switch to your branch feature/data-cleaning
-Click Compare & Pull Request
-Add description, explain what you’ve done
-Submit PR

PR allows code review and discussion before merging.
Check for merge conflicts - LGMT?

9. Merge a branch
-After approval, you can merge the branch to main on GitHub:
-Go to Pull Requests
-Open your PR
-Click Merge Pull Request
-Confirm Merge

Now your changes are part of main.

10. Sync Your Local main
This ensures your local main is up-to-date.
--> git checkout main
--> git pull origin main

11. Delete Merged branch (optional) but good if you will not need it and prevent confusion
locally
--> git branch -d [brand_name e.g feature/data-cleaning]

remote
--> git push origin --delete [brand_name e.g feature/data-cleaning]

Keep your repo clean by removing finished branches.


----------

Best Practices
-Use branches per feature/bugfix
-Pull the latest main before starting a new branch
-Write clear commit messages
-Keep main always deployable/working
-Review PRs carefully before merging
-Clean up old branches


----------
What is Forking in GitHub?
Forking is when you copy someone else’s GitHub repository into your own GitHub account.

It creates a separate, independent copy of the repo for you to modify without affecting the original.

Example setup:

Original Owner	            You (Forked Repo)
github.com/alice/project	github.com/you/project

You clicked "Fork" on GitHub, and now you have your own copy.

Why Fork a Repository? — Use Cases
1. Contributing to Open Source
You fork an open-source repo → make changes → send a pull request to the original repo.

2. Experiment Safely
Test features or changes without risking the original project.

3. Private Modifications
Use a public project base, but tweak it for your private needs.

What is origin and upstream in Git?
When you clone a repo, Git tracks where it came from. That remote URL is called origin by default.

When you're working with a fork:
>origin → it's your forked repo
>upstream → it's the original repo you forked from

Example Setup:
origin	https://github.com/yourusername/project.git	(Your copy of the repository)
upstream	https://github.com/original-owner/project.git	(The original repository you forked)

Forking Workflow
1. Fork the Repo on GitHub
Go to the original repo → click Fork → choose your account.

2. Clone Your Fork Locally
git clone https://github.com/yourusername/project.git

3. Add the Original Repo as upstream
git remote add upstream https://github.com/original-owner/project.git

>Check remotes:
git remote -v

>Expected output:
origin    https://github.com/yourusername/project.git (fetch)
origin    https://github.com/yourusername/project.git (push)
upstream  https://github.com/original-owner/project.git (fetch)
upstream  https://github.com/original-owner/project.git (push)

4. Fetch and Merge Changes from Upstream

>Fetch latest from upstream:
git fetch upstream

>Merge upstream changes into your local main:
git checkout main
git merge upstream/main

>Push your updated main to your fork:
git push origin main

----------
Why Bother with upstream?
When you fork, your repo becomes independent.
But the original repo might still get updates — so you can use upstream to keep your fork in sync.

Without it, your fork would fall behind and cause conflicts.

--------------
Typical Forking Workflow (Contributing to Open Source)
Fork the repo
Clone your fork
Add the original repo as upstream
Create a new branch
Make changes, commit
Push to your fork
Create a Pull Request to original repo
Sync your fork with upstream regularly

-------------
When Can You Safely Use git push Directly?
1. Your local branch is already tracking a remote branch
- You cloned a repo that already has upstream tracking.
- You previously ran: git checkout -b [branch e.g feature/api-update] and git push -u origin [branch e.g feature/api-update]

2. You’re on an existing branch that’s already linked to a remote -- Like the main branch you cloned main usually tracks origin/main automatically.

If you're ever unsure — just test safely by running:
git remote -v
git branch -vv


-------------
Branch Naming

Type	            Prefix	            Example	Use For
Feature	            feature/	        feature/dwh-sales-pipeline	New data pipelines, scripts, dashboards, models
Bugfix	            bugfix/ or fix/	    bugfix/fix-null-values-in-orders	Fixing data issues, ETL failures, broken reports
Hotfix	            hotfix/	            hotfix/urgent-patch-on-user-dim	Emergency production fixes
Refactor            refactor/	        refactor/optimize-order-etl-performance	Improving performance, code cleanup, restructuring
Release	            release/	        release/v1.3-dwh-enhancements	Prepping for a batch release or data model rollout
Chore/Maintenance	chore/	            chore/update-dag-schedule	Non-functional updates like schedules, configs
Experiment	        experiment/	        experiment/snowflake-partition-test	Test new tools, approaches, models

Examples for Data Engineering Context
feature/add-customer-dimension
feature/azure-adf-integration
bugfix/fix-null-values-in-sales-fact
hotfix/remove-duplicate-orders-prod
refactor/rename-columns-dim-product
release/v2.0-data-quality-improvements
chore/update-powerbi-dashboard-links
experiment/test-delta-lake-on-azure


Recommended Rules
Use lowercase, separated by -
Keep branch names descriptive but concise
Prefix consistently by type (feature/, bugfix/, release/ etc.)
Avoid spaces or special characters
For multi-word tasks, use hyphens not underscores or camelCase

DE branching naming ideas:
Use the following prefixes for branch names:
- `feature/` — New data pipelines, scripts, dashboards, data models
- `bugfix/` — Fixes to data issues, ETL errors, broken reports
- `hotfix/` — Urgent production data fixes
- `refactor/` — Code or pipeline optimizations, structure improvements
- `release/` — Release preparations for data model or system changes
- `chore/` — Maintenance updates, config changes, documentation
- `experiment/` — Testing new tools, models, approaches

-----------
What is a Merge Conflict?
A merge conflict happens when Git can’t automatically decide how to merge changes because two branches modified the same line(s) of code or data differently — 
or when a file has been deleted/renamed in one branch and modified in the other.

Common Causes of Merge Conflicts
1️. Parallel Changes to the Same File and Same Line
Two branches edit the same line(s) in a file.

Example:
feature-a updates a SQL query’s filter.
feature-b also updates that same query filter differently.

2️. One Branch Deletes a File, Another Modifies It
If feature-a deletes a pipeline config file, and feature-b modifies it — conflict.

3️. Branch Divergence (Stale Branches)
You created two branches:
Branch A: Merges first.
Branch B: Still working with the old state of main (before Branch A merged).
When Branch B is merged — it’ll likely cause conflicts if it touched anything Branch A already changed.

4️. Conflicting Renames
Both branches rename the same file to different names.

5️. Binary File Conflicts
Two branches make changes to the same image, diagram, or binary — can’t auto-merge.


Best Practices to Avoid Merge Conflicts
1. Regularly sync your branch with main
-->git fetch origin
-->git merge origin/main

this gives chance to review changes before merging.

2. Keep branches small and focused
→ Short-lived feature branches reduce conflicts.
3. Communicate with your team
→ Let others know what files or pipelines you’re modifying.
4. Use clear branch naming conventions
→ Makes it obvious what work is happening where.

-----------
YT resources:
https://www.youtube.com/watch?v=mJ-qvsxPHpY